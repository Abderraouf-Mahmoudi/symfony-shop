security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # Front office firewall - stateless, no authentication
        front:
            pattern: ^/(?!admin|login)
            stateless: true
            security: false
        # Back office firewall - with authentication
        back:
            pattern: ^/(admin|login)
            lazy: false  # Désactive le chargement paresseux pour forcer la vérification immédiate
            provider: app_user_provider
            custom_authenticator: App\Security\AppCustomAuthenticator
            entry_point: App\Security\AppCustomAuthenticator
            
            # Configuration explicite de la session
            stateless: false 
            
            # Configuration du logout Symfony natif 
            logout:
                path: admin_logout
                target: app_login
                invalidate_session: true
                delete_cookies:
                    PHPSESSID: { path: '/' }
                    REMEMBERME: { path: '/' }
                    sf_redirect: { path: '/' }
                csrf_token_generator: security.csrf.token_manager
                csrf_parameter: _csrf_token
                csrf_token_id: logout
            # Configuration remember_me
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /admin
                secure: true
                httponly: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
