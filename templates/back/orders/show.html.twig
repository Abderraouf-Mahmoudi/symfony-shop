{% extends 'back/base.html.twig' %}

{% block title %}Détails de la commande{% endblock %}

{% block content %}
<div class="page-inner pt-3 animate__animated animate__fadeIn">
    <div class="page-header d-flex justify-content-between align-items-center mb-4">
        <div>
            <div class="d-flex align-items-center mb-2">
                <div class="icon-circle bg-gradient-primary text-white shadow me-3">
                    <i class="fa fa-shopping-cart"></i>
                </div>
                <h2 class="page-title fw-bold mb-0">Commande #{{ order.id }}</h2>
            </div>
            <div class="d-flex align-items-center text-muted ms-4">
                <a href="{{ path('admin_dashboard') }}" class="text-decoration-none text-primary">
                    <i class="fa fa-home mr-1"></i> Tableau de bord
                </a>
                <i class="fa fa-chevron-right mx-2 small"></i>
                <a href="{{ path('admin_orders_index') }}" class="text-decoration-none text-primary">
                    <i class="fa fa-shopping-cart mr-1"></i> Commandes
                </a>
                <i class="fa fa-chevron-right mx-2 small"></i>
                <span>Détails</span>
            </div>
        </div>
        <div>
            <a href="{{ path('admin_orders_pdf', {'id': order.id}) }}" class="btn btn-gradient-danger btn-sm shadow hover-lift rounded-3 me-2" target="_blank">
                <i class="fa fa-file-pdf mr-2"></i> Exporter PDF
            </a>
            <a href="{{ path('admin_orders_index') }}" class="btn btn-gradient-primary btn-sm shadow hover-lift rounded-3">
                <i class="fa fa-arrow-left mr-2"></i> Retour
            </a>
        </div>
    </div>
    
    {% for label, messages in app.flashes %}
        {% for message in messages %}
            <div class="alert alert-{{ label }} alert-dismissible fade show rounded-3 shadow-sm" role="alert">
                <i class="fa {% if label == 'success' %}fa-check-circle{% elseif label == 'danger' %}fa-exclamation-circle{% elseif label == 'warning' %}fa-exclamation-triangle{% else %}fa-info-circle{% endif %} mr-2"></i>
                {{ message }}
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
        {% endfor %}
    {% endfor %}
    
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card border-0 shadow rounded-3 animate__animated animate__fadeIn">
                <div class="card-header bg-light py-3 d-flex align-items-center">
                    <div class="icon-circle bg-gradient-primary text-white shadow me-3 small-icon">
                        <i class="fa fa-tasks"></i>
                    </div>
                    <h5 class="mb-0 fw-bold">Statut de la Commande</h5>
                </div>
                <div class="card-body p-4">
                    <!-- Order Status Badge -->
                    <div class="d-flex align-items-center mb-4">
                        <h6 class="mb-0 me-3">Statut actuel:</h6>
                        {% if order.status == 'pending' %}
                            <span class="badge bg-gradient-warning text-dark px-4 py-2 shadow-sm">
                                <i class="fa fa-clock me-1"></i> En attente
                            </span>
                        {% elseif order.status == 'done' %}
                            <span class="badge bg-gradient-success text-white px-4 py-2 shadow-sm">
                                <i class="fa fa-check-circle me-1"></i> Terminée
                            </span>
                        {% elseif order.status == 'canceled' %}
                            <span class="badge bg-gradient-danger text-white px-4 py-2 shadow-sm">
                                <i class="fa fa-times-circle me-1"></i> Annulée
                            </span>
                        {% endif %}
                    </div>
                    
                    <!-- Status Change Options -->
                    {% if order.status != 'done' and order.status != 'canceled' %}
                    <div class="d-flex flex-wrap gap-2">
                        <button type="button" class="btn btn-gradient-success text-white rounded-pill px-4 py-2 shadow-sm hover-lift status-action-button" data-status="done" data-url="{{ path('admin_orders_update_status', {'id': order.id, 'status': 'done'}) }}">
                            <i class="fa fa-check-circle me-2"></i> Terminée
                        </button>
                        <button type="button" class="btn btn-gradient-danger text-white rounded-pill px-4 py-2 shadow-sm hover-lift status-action-button" data-status="canceled" data-url="{{ path('admin_orders_update_status', {'id': order.id, 'status': 'canceled'}) }}">
                            <i class="fa fa-times-circle me-2"></i> Annulée
                        </button>
                    </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
                
    <!-- Customer & Order Information -->    
    <div class="row mb-4">
        <!-- Customer Information Card -->
        <div class="col-lg-6 mb-4 mb-lg-0">
            <div class="card border-0 shadow-lg hover-lift-sm rounded-3 h-100 animate__animated animate__fadeIn">
                <!-- Professional header with primary gradient and crisp icon -->
                <div class="card-header bg-gradient-primary text-white py-3 d-flex align-items-center rounded-top">
                    <div class="icon-circle-lg bg-white text-gradient-primary shadow-lg me-3">
                        <i class="fas fa-user-tie"></i>
                    </div>
                    <h5 class="mb-0 fw-bold">Informations Client</h5>
                </div>
                <div class="card-body p-4">
                    <!-- Professional customer info with clear structure -->
                    <div class="client-info">
                        <!-- Customer name with highlighted panel -->
                        <div class="info-panel mb-4">
                            <div class="info-label">Nom du client</div>
                            <div class="info-value primary-value">
                                <i class="fas fa-user-circle info-icon primary-icon"></i>
                                {{ order.customerName }}
                            </div>
                        </div>
                        
                        <!-- Phone with separate panel if available -->
                        {% if order.phone %}
                        <div class="info-panel mb-4">
                            <div class="info-label">Téléphone</div>
                            <div class="info-value">
                                <i class="fas fa-phone-alt info-icon"></i>
                                {{ order.phone }}
                            </div>
                        </div>
                        {% endif %}
                        
                        <!-- Date & Status information in professional panel format -->
                        <div class="info-panel mb-4">
                            <div class="info-label">Date & Statut</div>
                            <div class="info-value">
                                <div class="timeline-item">
                                    <i class="fas fa-calendar-plus info-icon success-icon"></i>
                                    <span class="timeline-date">{{ order.createdAt|date('d/m/Y') }}</span>
                                    <span class="timeline-text">Créée à {{ order.createdAt|date('H:i') }}</span>
                                </div>
                            </div>
                            <div class="info-value">
                                {% if order.updatedAt %}
                                <div class="timeline-item mt-2">
                                    <i class="fas fa-sync info-icon warning-icon"></i>
                                    <span class="timeline-date">{{ order.updatedAt|date('d/m/Y') }}</span>
                                    <span class="timeline-text">Mise à jour à {{ order.updatedAt|date('H:i') }}</span>
                                </div>
                                {% endif %}
                            </div>
                        </div>
                        
                        {% if order.size %}
                        <!-- Size information -->  
                        <div class="info-panel mb-4">
                            <div class="info-label">Taille</div>
                            <div class="info-value">
                                <i class="fas fa-ruler-combined info-icon"></i>
                                {{ order.size }}
                            </div>
                        </div>
                        {% endif %}
                        
                        {% if order.notes is not empty %}
                        <!-- Notes section with improved styling -->  
                        <div class="info-panel mb-0">
                            <div class="info-label">Notes additionnelles</div>
                            <div class="notes-container">
                                <i class="fas fa-comment-alt notes-icon"></i>
                                <div class="notes-content">{{ order.notes|nl2br }}</div>
                            </div>
                        </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
                    
        <!-- Shipping & Billing Information Card -->        
        <div class="col-lg-6">
            <div class="card border-0 shadow-lg hover-lift-sm rounded-3 h-100 animate__animated animate__fadeIn">
                <!-- Professional header with success gradient and crisp icon -->
                <div class="card-header bg-gradient-success text-white py-3 d-flex align-items-center rounded-top">
                    <div class="icon-circle-lg bg-white text-gradient-success shadow-lg me-3">
                        <i class="fas fa-shipping-fast"></i>
                    </div>
                    <h5 class="mb-0 fw-bold">Informations de livraison</h5>
                </div>
                <div class="card-body p-4">
                    <div class="shipping-info">
                        <!-- Shipping Address with professional design -->
                        <div class="info-panel mb-4">
                            <div class="info-label">Adresse de livraison</div>
                            <div class="address-card">
                                <div class="address-header">
                                    <i class="fas fa-truck-loading address-icon"></i>
                                    <span class="address-type">Livraison</span>
                                </div>
                                <div class="address-content">
                                    <div class="address-line">{{ order.shippingAddress }}</div>
                                    {% if order.city %}
                                    <div class="address-line">{{ order.city }}</div>
                                    {% endif %}
                                    {% if order.postalCode %}
                                    <div class="address-line">{{ order.postalCode }}</div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        
                        <!-- Billing Address with professional design -->
                        <div class="info-panel mb-4">
                            <div class="info-label">Adresse de facturation</div>
                            <div class="address-card">
                                <div class="address-header billing-header">
                                    <i class="fas fa-file-invoice address-icon"></i>
                                    <span class="address-type">Facturation</span>
                                </div>
                                <div class="address-content">
                                    <div class="address-line">{{ order.billingAddress ?: order.shippingAddress }}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Order Items Table -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow rounded-3 animate__animated animate__fadeIn">
                <div class="card-header bg-light py-3 d-flex align-items-center">
                    <div class="icon-circle bg-gradient-warning text-white shadow me-3 small-icon">
                        <i class="fa fa-shopping-basket"></i>
                    </div>
                    <h5 class="mb-0 fw-bold">Articles commandés</h5>
                </div>
                <div class="card-body p-4">
                    <div class="table-responsive">
                        <table class="table table-hover align-middle">
                            <thead class="table-light">
                                <tr>
                                    <th style="width: 10%" class="text-center">Image</th>
                                    <th style="width: 40%">Produit</th>
                                    {% if order.items|first.size is defined %}
                                    <th class="text-center">Taille</th>
                                    {% endif %}
                                    {% if order.items|first.colorName is defined %}
                                    <th class="text-center">Couleur</th>
                                    {% endif %}
                                    <th class="text-center">Prix unitaire</th>
                                    <th class="text-center">Quantité</th>
                                    <th class="text-end">Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for item in order.items %}
                                <tr>
                                    <td class="text-center">
                                        {% if item.product.getPrimaryImage() is defined and item.product.getPrimaryImage() %}
                                            <img src="{{ asset('uploads/products/' ~ item.product.getPrimaryImage().imagePath) }}" alt="{{ item.product.name }}" class="rounded" width="50" height="50" style="object-fit: cover;">
                                        {% else %}
                                            <div class="bg-light rounded d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;">
                                                <i class="fa fa-image text-muted"></i>
                                            </div>
                                        {% endif %}
                                    </td>
                                    <td>
                                        {% if item.product is defined and item.product %}
                                            <p class="mb-0 fw-bold">{{ item.product.name }}</p>
                                            <small class="text-muted">ID: {{ item.product.id }}</small>
                                            {% if item.product.stock is defined %}
                                                <br><small class="{% if item.product.stock > 10 %}text-success{% elseif item.product.stock > 0 %}text-warning{% else %}text-danger{% endif %}">
                                                    <i class="fa {% if item.product.stock > 10 %}fa-check-circle{% elseif item.product.stock > 0 %}fa-exclamation-circle{% else %}fa-times-circle{% endif %} mr-1"></i>
                                                    Stock: {{ item.product.stock }}
                                                </small>
                                            {% endif %}
                                        {% else %}
                                            <span class="badge bg-danger">Produit supprimé</span>
                                        {% endif %}
                                    </td>
                                    {% if item.size is defined %}
                                    <td class="text-center">
                                        {% if item.size %}
                                            <span class="badge bg-light text-dark">{{ item.size }}</span>
                                        {% else %}
                                            -
                                        {% endif %}
                                    </td>
                                    {% endif %}
                                    {% if item.colorName is defined %}
                                    <td class="text-center">
                                        {% if item.colorName %}
                                            <div class="d-flex align-items-center justify-content-center">
                                                <span class="color-sample mr-2" style="background-color: {{ item.colorCode }}; width: 15px; height: 15px; display: inline-block; border-radius: 50%; border: 1px solid #ddd;"></span>
                                                <span>{{ item.colorName }}</span>
                                            </div>
                                        {% else %}
                                            -
                                        {% endif %}
                                    </td>
                                    {% endif %}
                                    <td class="text-center">{{ item.price|number_format(2, ',', ' ') }} TND</td>
                                    <td class="text-center">
                                        <span class="badge bg-primary rounded-pill px-3 py-2">{{ item.quantity }}</span>
                                    </td>
                                    <td class="text-end fw-bold">{{ (item.price * item.quantity)|number_format(2, ',', ' ') }} TND</td>
                                </tr>
                                {% else %}
                                <tr>
                                    <td colspan="7" class="text-center py-4 text-muted">
                                        <i class="fa fa-box-open fa-2x mb-2"></i>
                                        <p class="mb-0">Aucun article trouvé pour cette commande</p>
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                            <tfoot>
                                <tr class="table-light">
                                    <td colspan="{% if order.items|first.size is defined and order.items|first.colorName is defined %}6{% elseif order.items|first.size is defined or order.items|first.colorName is defined %}5{% else %}4{% endif %}" class="text-end fw-bold">Total: {{ order.totalAmount|number_format(2, ',', ' ') }} TND</td>
                                    <td class="text-end fw-bold fs-5 text-primary"></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .icon-circle {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .icon-circle:hover {
            transform: scale(1.1);
        }
        
        .small-icon {
            width: 30px;
            height: 30px;
            font-size: 0.85rem;
        }
        
        .hover-lift {
            transition: all 0.3s ease;
        }
        
        .hover-lift:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
        }
        
        /* Gradient backgrounds */
        .bg-gradient-primary {
            background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
        }
        
        .bg-gradient-success {
            background: linear-gradient(135deg, #1cc88a 0%, #13855c 100%);
        }
        
        .bg-gradient-info {
            background: linear-gradient(135deg, #36b9cc 0%, #258391 100%);
        }
        
        .bg-gradient-warning {
            background: linear-gradient(135deg, #f6c23e 0%, #dda20a 100%);
        }
        
        .bg-gradient-light {
            background: linear-gradient(135deg, #f8f9fc 0%, #e2e3e5 100%);
        }
        
        /* Text gradients */
        .text-gradient-info {
            background: linear-gradient(135deg, #36b9cc 0%, #258391 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .text-gradient-dark {
            background: linear-gradient(135deg, #5a5c69 0%, #373840 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .text-gradient-secondary {
            background: linear-gradient(135deg, #858796 0%, #60616f 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        /* Additional utilities */
        .hover-lift-sm:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
        }
        
        .shadow-lg {
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1) !important;
        }
        
        .smaller-icon {
            width: 24px;
            height: 24px;
            font-size: 0.7rem;
        }
        
        /* Animation */
        @keyframes pulse-light {
            0% { box-shadow: 0 0 0 0 rgba(54, 185, 204, 0.4); }
            70% { box-shadow: 0 0 0 5px rgba(54, 185, 204, 0); }
            100% { box-shadow: 0 0 0 0 rgba(54, 185, 204, 0); }
        }
        
        .pulse-light {
            animation: pulse-light 2s infinite;
        }
        
        .bg-gradient-danger {
            background: linear-gradient(135deg, #e74a3b 0%, #be2617 100%);
        }
        
        .bg-gradient-secondary {
            background: linear-gradient(135deg, #858796 0%, #60616f 100%);
        }
        
        /* Professional card styles */
        .icon-circle-lg {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
            transition: all 0.3s ease;
            font-size: 1.25rem;
        }
        
        .info-panel {
            position: relative;
            margin-bottom: 1.5rem;
        }
        
        .info-label {
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            color: #858796;
            margin-bottom: 0.5rem;
            letter-spacing: 0.5px;
        }
        
        .info-value {
            font-size: 1rem;
            padding: 0.75rem 1rem;
            background-color: #f8f9fc;
            border-radius: 0.5rem;
            border-left: 3px solid #4e73df;
            box-shadow: 0 2px 4px rgba(0,0,0,0.04);
            display: flex;
            align-items: center;
        }
        
        .info-value.primary-value {
            border-left-color: #4e73df;
        }
        
        .info-icon {
            margin-right: 10px;
            width: 20px;
            text-align: center;
            font-size: 0.9rem;
        }
        
        .primary-icon { color: #4e73df; }
        .success-icon { color: #1cc88a; }
        .warning-icon { color: #f6c23e; }
        .danger-icon { color: #e74a3b; }
        
        /* Timeline styling for dates */
        .timeline-item {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
        }
        
        .timeline-date {
            font-weight: 600;
            margin-right: 10px;
        }
        
        .timeline-text {
            color: #858796;
        }
        
        /* Notes styling */
        .notes-container {
            display: flex;
            background-color: #fff8e1;
            padding: 1rem;
            border-radius: 0.5rem;
            border-left: 3px solid #f6c23e;
            box-shadow: 0 2px 4px rgba(0,0,0,0.04);
        }
        
        .notes-icon {
            color: #f6c23e;
            margin-right: 15px;
            font-size: 1.2rem;
            margin-top: 3px;
        }
        
        .notes-content {
            flex: 1;
            line-height: 1.6;
        }
        
        /* Address card styling */
        .address-card {
            background-color: #fff;
            border-radius: 0.5rem;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            border: 1px solid #e3e6f0;
        }
        
        .address-header {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            background: linear-gradient(135deg, #1cc88a 0%, #13855c 100%);
            color: white;
        }
        
        .billing-header {
            background: linear-gradient(135deg, #f6c23e 0%, #dda20a 100%);
        }
        
        .address-icon {
            margin-right: 10px;
            font-size: 1rem;
        }
        
        .address-type {
            font-weight: 600;
            font-size: 0.9rem;
        }
        
        .address-content {
            padding: 1rem;
        }
        
        .address-line {
            margin-bottom: 0.4rem;
            line-height: 1.5;
        }
        
        .address-line:last-child {
            margin-bottom: 0;
        }
        
        /* Button gradients */
        .btn-gradient-primary {
            background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
            color: white;
            border: none;
            transition: all 0.3s ease;
        }
        
        .btn-gradient-success {
            background: linear-gradient(135deg, #1cc88a 0%, #13855c 100%);
            color: white;
            border: none;
            transition: all 0.3s ease;
        }
        
        .btn-gradient-info {
            background: linear-gradient(135deg, #36b9cc 0%, #258391 100%);
            color: white;
            border: none;
            transition: all 0.3s ease;
        }
        
        .btn-gradient-warning {
            background: linear-gradient(135deg, #f6c23e 0%, #dda20a 100%);
            color: white;
            border: none;
            transition: all 0.3s ease;
        }
        
        .btn-gradient-danger {
            background: linear-gradient(135deg, #e74a3b 0%, #be2617 100%);
            color: white;
            border: none;
            transition: all 0.3s ease;
        }
        
        .btn-gradient-secondary {
            background: linear-gradient(135deg, #858796 0%, #60616f 100%);
            color: white;
            border: none;
            transition: all 0.3s ease;
        }
        
        /* Table styling */
        .table {
            border-collapse: separate;
            border-spacing: 0;
        }
        
        .table thead th {
            border-top: none;
            border-bottom: 1px solid #e3e6f0;
            font-weight: 600;
            font-size: 0.8rem;
            letter-spacing: 0.05em;
            text-transform: uppercase;
            color: #5a5c69;
        }
        
        .table tbody tr {
            transition: all 0.2s ease;
        }
        
        .table tbody tr:hover {
            background-color: rgba(240, 243, 255, 0.7);
            transform: translateY(-1px);
            box-shadow: 0 3px 5px rgba(0,0,0,0.05);
        }
        
        /* Badge styling */
        .badge {
            padding: 0.5rem 1rem;
            font-weight: 500;
            letter-spacing: 0.03em;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }
        
        .badge:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        $(document).ready(function() {
            // Add animations on page load
            setTimeout(function() {
                $('.card').addClass('animate__fadeIn');
            }, 100);
            
            // Initialize DataTables if any exist
            if ($('#recent-orders').length) {
                $('#recent-orders').DataTable({
                    "pageLength": 5,
                    "lengthMenu": [[5, 10, 25, 50, -1], [5, 10, 25, 50, "Tous"]],
                    "language": {
                        "url": "//cdn.datatables.net/plug-ins/1.10.25/i18n/French.json"
                    }
                });
            }
            
            // Initialize order items table
            if ($('#order-items-table').length) {
                $('#order-items-table').DataTable({
                    language: {
                        url: '//cdn.datatables.net/plug-ins/1.10.24/i18n/French.json'
                    },
                    pageLength: 5,
                    lengthMenu: [[5, 10, 25, -1], [5, 10, 25, "Tous"]]
                });
            }
            
            // Initialize tooltips
            $('[data-toggle="tooltip"]').tooltip();
            
            // New status action button handler with SweetAlert2 and AJAX
            $('.status-action-button').on('click', function() {
                const status = $(this).data('status');
                const url = $(this).data('url');
                const orderId = {{ order.id }};
                let statusText = '';
                let statusIcon = '';
                let confirmBtnColor = '';
                
                switch(status) {
                    case 'done': 
                        statusText = 'Terminée'; 
                        statusIcon = 'success';
                        confirmBtnColor = '#1cc88a';
                        break;
                    case 'canceled': 
                        statusText = 'Annulée'; 
                        statusIcon = 'error';
                        confirmBtnColor = '#e74a3b';
                        break;
                }
                
                // Show confirmation dialog
                Swal.fire({
                    title: 'Changer le statut ?',
                    text: `Êtes-vous sûr de vouloir changer le statut de la commande en "${statusText}" ?`,
                    icon: statusIcon,
                    showCancelButton: true,
                    confirmButtonColor: confirmBtnColor,
                    cancelButtonColor: '#858796',
                    confirmButtonText: `<i class="fa fa-check"></i> Oui, changer en ${statusText}`,
                    cancelButtonText: '<i class="fa fa-times"></i> Annuler',
                    showClass: {
                        popup: 'animate__animated animate__fadeInDown'
                    },
                    hideClass: {
                        popup: 'animate__animated animate__fadeOutUp'
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Show loading state
                        Swal.fire({
                            title: 'Traitement en cours...',
                            html: `<div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="sr-only">Chargement...</span>
                                    </div>
                                  </div>`,
                            showConfirmButton: false,
                            allowOutsideClick: false,
                            didOpen: () => {
                                Swal.showLoading();
                            }
                        });
                        
                        // Use fetch to make the request
                        fetch(url)
                            .then(response => response.text())
                            .then(html => {
                                // Process the response and extract flash messages
                                const parser = new DOMParser();
                                const doc = parser.parseFromString(html, 'text/html');
                                
                                // Build success message
                                let successHtml = `<p class="mb-3">Traitement de la commande #${orderId} effectué</p>`;
                                
                                // Add product stock information for 'done' status
                                if (status === 'done') {
                                    // Get number of items
                                    const itemCount = {{ order.items|length }};
                                    successHtml += `<p class="mb-3">Commande avec ${itemCount} article(s)</p>`;
                                    
                                    {% for item in order.items %}
                                    successHtml += `<p class="mb-2">Produit #{{ item.product.id }}: Stock mis à jour (-{{ item.quantity }} unités)</p>`;
                                    {% endfor %}
                                }
                                
                                // Add status update message
                                successHtml += `<p class="mt-3">Statut de la commande modifié en <strong>${statusText}</strong></p>`;
                                
                                // Show success message
                                Swal.fire({
                                    title: 'Mis à jour avec succès!',
                                    html: successHtml,
                                    icon: 'success',
                                    confirmButtonText: 'OK',
                                    confirmButtonColor: confirmBtnColor
                                }).then(() => {
                                    // Reload the page to show updated status
                                    window.location.reload();
                                });
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire({
                                    title: 'Erreur!',
                                    text: 'Une erreur est survenue lors du changement de statut.',
                                    icon: 'error',
                                    confirmButtonText: 'OK',
                                    confirmButtonColor: '#e74a3b'
                                });
                            });
                    }
                });
            });
            
            // Delete order button click handler
            $('.delete-order-button').on('click', function() {
                const form = $(this).closest('form');
                
                Swal.fire({
                    title: 'Supprimer la commande ?',
                    text: "Cette action est irréversible !",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#e74a3b',
                    cancelButtonColor: '#858796',
                    confirmButtonText: '<i class="fa fa-trash"></i> Oui, supprimer',
                    cancelButtonText: '<i class="fa fa-times"></i> Annuler',
                    showClass: {
                        popup: 'animate__animated animate__fadeInDown'
                    },
                    hideClass: {
                        popup: 'animate__animated animate__fadeOutUp'
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        form.submit();
                    }
                });
            });
        });
        
        // Update product stock function with SweetAlert2
        function updateProductStock() {
            // Show confirmation dialog
            Swal.fire({
                title: 'Mettre à jour le stock ?',
                text: 'Cette action va ajuster le stock des produits en fonction des quantités commandées.',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#36b9cc',
                cancelButtonColor: '#858796',
                confirmButtonText: '<i class="fa fa-sync"></i> Oui, mettre à jour',
                cancelButtonText: '<i class="fa fa-times"></i> Annuler',
                showClass: {
                    popup: 'animate__animated animate__fadeInDown'
                },
                hideClass: {
                    popup: 'animate__animated animate__fadeOutUp'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    // Disable button to prevent multiple clicks
                    const button = document.getElementById('updateStockBtn');
                    button.disabled = true;
                    button.innerHTML = '<i class="fa fa-spinner fa-spin me-2"></i> Mise à jour en cours...';
                
                // Get order items
                const orderItems = [];
                {% for item in order.items %}
                    {% if item.product is defined and item.product %}
                    orderItems.push({
                        productId: {{ item.product.id }},
                        quantity: {{ item.quantity }},
                        productName: "{{ item.product.name }}"
                    });
                    {% endif %}
                {% endfor %}
                
                // Process each item and update stock
                const updatePromises = [];
                const results = [];
                
                orderItems.forEach(item => {
                    updatePromises.push(
                        fetch('/api/products/' + item.productId)
                            .then(response => response.json())
                            .then(product => {
                                // Calculate new stock
                                const currentStock = product.stock;
                                const newStock = Math.max(0, currentStock - item.quantity);
                                
                                // Update stock
                                return fetch('/api/products/' + item.productId + '/update-stock', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({ stock: newStock })
                                })
                                .then(() => {
                                    results.push({
                                        id: item.productId,
                                        name: item.productName,
                                        oldStock: currentStock,
                                        newStock: newStock,
                                        quantity: item.quantity
                                    });
                                });
                            })
                    );
                });
                
                // Handle all updates
                Promise.all(updatePromises)
                    .then(() => {
                        // Re-enable button
                        button.disabled = false;
                        button.innerHTML = '<i class="fa fa-sync mr-2"></i> Mettre à jour le stock';
                        
                        // Create alert messages
                        let alertsHtml = '';
                        results.forEach(result => {
                            alertsHtml += `
                            <div class="alert alert-success alert-dismissible fade show rounded-3 shadow-sm mb-3" role="alert">
                                <i class="fa fa-check-circle mr-2"></i>
                                Produit #${result.id} (${result.name}): Stock mis à jour de ${result.oldStock} à ${result.newStock} (-${result.quantity} unités)
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            </div>`;
                        });
                        
                        // Show success notification with SweetAlert2 instead of alerts
                        let successMessage = '<ul class="mb-0 ps-3 text-start">';
                        results.forEach(result => {
                            successMessage += `<li>Produit #${result.id} (${result.name}): Stock mis à jour de ${result.oldStock} à ${result.newStock} (-${result.quantity} unités)</li>`;
                        });
                        successMessage += '</ul>';
                        
                        Swal.fire({
                            title: 'Stock mis à jour !',
                            html: successMessage,
                            icon: 'success',
                            confirmButtonText: '<i class="fa fa-check"></i> OK',
                            confirmButtonColor: '#1cc88a',
                        }).then(() => {
                            // Reload the page after confirmation
                            location.reload();
                        });
                    })
                    .catch(error => {
                        console.error('Error updating stock:', error);
                        button.disabled = false;
                        button.innerHTML = '<i class="fa fa-sync me-2"></i> Mettre à jour le stock';
                        
                        // Show error with SweetAlert2
                        Swal.fire({
                            title: 'Erreur !',
                            text: 'Erreur lors de la mise à jour du stock. Veuillez réessayer.',
                            icon: 'error',
                            confirmButtonText: 'OK',
                            confirmButtonColor: '#e74a3b',
                        });
                    });
                }
            });
            }
        
    </script>
{% endblock %}
